#!/usr/bin/env python3
"""
Enhanced RetailXAI Dashboard - Dark Theme with Full Functionality
Production-ready dashboard with edit functionality and dark theme
"""

from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, JSONResponse
import uvicorn
import json
import os
from datetime import datetime
from typing import List, Dict, Any, Optional
from pydantic import BaseModel

app = FastAPI(
    title="RetailXAI Dashboard",
    description="Enhanced production-ready dashboard for RetailXAI",
    version="2.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Pydantic models for request/response
class DraftUpdate(BaseModel):
    title: Optional[str] = None
    summary: Optional[str] = None
    body: Optional[str] = None
    tags: Optional[List[str]] = None

class DraftCreate(BaseModel):
    title: str
    summary: str
    body: str
    tags: List[str] = []

# Sample data
SAMPLE_DRAFTS = [
    {
        "id": 1,
        "title": "Walmart Shows Strong Q4 Performance",
        "summary": "Walmart demonstrates robust growth in Q4 2024 with positive market trends.",
        "body": "Walmart has shown strong performance in Q4 2024 with positive sentiment and growing market share. The company is focusing on digital-first consumer preferences and expanding automation capabilities. Key highlights include:\n\n• Revenue growth of 8.5% year-over-year\n• E-commerce sales up 23% from previous quarter\n• Strong performance in grocery and general merchandise\n• Continued investment in supply chain automation\n\nAnalysts are optimistic about Walmart's positioning in the competitive retail landscape, particularly their focus on omnichannel experiences and data-driven decision making.",
        "status": "draft",
        "created_at": "2025-09-08T23:44:25Z",
        "updated_at": "2025-09-08T23:44:25Z",
        "tags": ["retail", "walmart", "q4", "performance", "earnings"],
        "publish_destinations": ["substack", "linkedin", "twitter"],
        "published_to": []
    },
    {
        "id": 2,
        "title": "AI Trends in Retail",
        "summary": "This is a test article generated by RetailXAI to demonstrate LinkedIn publishing capabilities.",
        "body": "The retail industry is experiencing significant transformation driven by AI and automation technologies. Companies are investing in these capabilities to improve customer experience and operational efficiency.\n\n## Key AI Trends:\n\n### 1. Personalization at Scale\n- AI-powered recommendation engines\n- Dynamic pricing optimization\n- Personalized marketing campaigns\n\n### 2. Supply Chain Optimization\n- Predictive demand forecasting\n- Automated inventory management\n- Route optimization for logistics\n\n### 3. Customer Experience\n- Chatbots and virtual assistants\n- Visual search capabilities\n- Augmented reality shopping experiences\n\n### 4. Operational Efficiency\n- Automated checkout systems\n- Smart shelf management\n- Predictive maintenance\n\nThese technologies are reshaping how retailers interact with customers and manage operations, creating new opportunities for growth and efficiency.",
        "status": "draft",
        "created_at": "2025-09-11T22:11:42Z",
        "updated_at": "2025-09-11T22:11:42Z",
        "tags": ["ai", "retail", "automation", "technology", "innovation"],
        "publish_destinations": ["substack", "linkedin", "twitter"],
        "published_to": []
    },
    {
        "id": 3,
        "title": "E-commerce Growth in 2024",
        "summary": "E-commerce continues to show strong growth with new consumer behaviors emerging post-pandemic.",
        "body": "The e-commerce landscape in 2024 continues to evolve rapidly, driven by changing consumer behaviors and technological advancements.\n\n## Market Overview\n\nGlobal e-commerce sales are projected to reach $6.3 trillion by 2024, representing a 9.2% increase from the previous year. This growth is fueled by:\n\n- Increased mobile commerce adoption\n- Social commerce integration\n- Subscription-based business models\n- Sustainability-focused shopping\n\n## Emerging Trends\n\n### Social Commerce\nPlatforms like TikTok Shop and Instagram Shopping are becoming major sales channels, especially for younger demographics.\n\n### Sustainability Focus\nConsumers are increasingly prioritizing eco-friendly products and packaging, driving retailers to adopt sustainable practices.\n\n### Subscription Models\nFrom meal kits to beauty boxes, subscription services are creating predictable revenue streams and customer loyalty.\n\n## Technology Impact\n\nAI and machine learning are enabling:\n- Hyper-personalized shopping experiences\n- Dynamic pricing strategies\n- Automated customer service\n- Predictive inventory management\n\n## Future Outlook\n\nThe convergence of social media, AI, and sustainability will continue to shape the e-commerce landscape, creating new opportunities for innovative retailers.",
        "status": "draft",
        "created_at": "2025-09-12T00:15:30Z",
        "updated_at": "2025-09-12T00:15:30Z",
        "tags": ["ecommerce", "growth", "technology", "trends", "consumer-behavior"],
        "publish_destinations": ["substack", "linkedin", "twitter"],
        "published_to": []
    }
]

SAMPLE_HEALTH = {
    "status": "healthy",
    "database": "connected",
    "redis": "connected",
    "agents": "running",
    "last_check": datetime.now().isoformat()
}

SAMPLE_STATS = {
    "total_drafts": 3,
    "published_drafts": 1,
    "draft_drafts": 2,
    "active_channels": 4,
    "total_views": 2847
}

@app.get("/")
async def root():
    """Serve the main dashboard page with dark theme"""
    return HTMLResponse(content="""
    <!DOCTYPE html>
    <html lang="en" class="dark">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>RetailXAI Dashboard</title>
        <script src="https://cdn.tailwindcss.com"></script>
        <script>
            tailwind.config = {
                darkMode: 'class',
                theme: {
                    extend: {
                        colors: {
                            'dark-bg': '#0f172a',
                            'dark-surface': '#1e293b',
                            'dark-card': '#334155',
                            'dark-text': '#f1f5f9',
                            'dark-muted': '#94a3b8'
                        }
                    }
                }
            }
        </script>
        <style>
            .dark {
                color-scheme: dark;
            }
            .gradient-bg {
                background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);
            }
            .card-hover {
                transition: all 0.3s ease;
            }
            .card-hover:hover {
                transform: translateY(-2px);
                box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.3), 0 10px 10px -5px rgba(0, 0, 0, 0.2);
            }
            .btn-primary {
                background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
                transition: all 0.3s ease;
            }
            .btn-primary:hover {
                background: linear-gradient(135deg, #1d4ed8 0%, #1e40af 100%);
                transform: translateY(-1px);
            }
            .btn-success {
                background: linear-gradient(135deg, #10b981 0%, #059669 100%);
                transition: all 0.3s ease;
            }
            .btn-success:hover {
                background: linear-gradient(135deg, #059669 0%, #047857 100%);
                transform: translateY(-1px);
            }
            .btn-warning {
                background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
                transition: all 0.3s ease;
            }
            .btn-warning:hover {
                background: linear-gradient(135deg, #d97706 0%, #b45309 100%);
                transform: translateY(-1px);
            }
        </style>
    </head>
    <body class="gradient-bg min-h-screen text-dark-text">
        <div class="container mx-auto px-4 py-8">
            <header class="mb-8">
                <div class="flex items-center justify-between">
                    <div>
                        <h1 class="text-4xl font-bold text-white mb-2">RetailXAI Dashboard</h1>
                        <p class="text-dark-muted text-lg">Enhanced Production-Grade Content Management System</p>
                        <div class="mt-3">
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-yellow-500/20 text-yellow-400 border border-yellow-500/30">
                                🚧 DEMO MODE - No actual publishing occurs
                            </span>
                        </div>
                    </div>
                    <div class="flex items-center space-x-4">
                        <div class="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
                        <span class="text-sm text-dark-muted">System Online</span>
                    </div>
                </div>
            </header>
            
            <!-- Stats Cards -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                <div class="bg-dark-surface rounded-xl shadow-xl p-6 card-hover border border-dark-card">
                    <div class="flex items-center justify-between">
                        <div>
                            <h3 class="text-lg font-semibold text-dark-muted">Total Drafts</h3>
                            <p class="text-3xl font-bold text-blue-400" id="total-drafts">-</p>
                        </div>
                        <div class="w-12 h-12 bg-blue-500/20 rounded-lg flex items-center justify-center">
                            <svg class="w-6 h-6 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                            </svg>
                        </div>
                    </div>
                </div>
                <div class="bg-dark-surface rounded-xl shadow-xl p-6 card-hover border border-dark-card">
                    <div class="flex items-center justify-between">
                        <div>
                            <h3 class="text-lg font-semibold text-dark-muted">Published</h3>
                            <p class="text-3xl font-bold text-green-400" id="published-drafts">-</p>
                        </div>
                        <div class="w-12 h-12 bg-green-500/20 rounded-lg flex items-center justify-center">
                            <svg class="w-6 h-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                        </div>
                    </div>
                </div>
                <div class="bg-dark-surface rounded-xl shadow-xl p-6 card-hover border border-dark-card">
                    <div class="flex items-center justify-between">
                        <div>
                            <h3 class="text-lg font-semibold text-dark-muted">Draft</h3>
                            <p class="text-3xl font-bold text-yellow-400" id="draft-drafts">-</p>
                        </div>
                        <div class="w-12 h-12 bg-yellow-500/20 rounded-lg flex items-center justify-center">
                            <svg class="w-6 h-6 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                            </svg>
                        </div>
                    </div>
                </div>
                <div class="bg-dark-surface rounded-xl shadow-xl p-6 card-hover border border-dark-card">
                    <div class="flex items-center justify-between">
                        <div>
                            <h3 class="text-lg font-semibold text-dark-muted">Active Channels</h3>
                            <p class="text-3xl font-bold text-purple-400" id="active-channels">-</p>
                        </div>
                        <div class="w-12 h-12 bg-purple-500/20 rounded-lg flex items-center justify-center">
                            <svg class="w-6 h-6 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2m-9 0h10m-10 0a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V6a2 2 0 00-2-2M9 9h6m-6 4h6m-6 4h6"></path>
                            </svg>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Health Status -->
            <div class="bg-dark-surface rounded-xl shadow-xl p-6 mb-8 border border-dark-card">
                <h2 class="text-xl font-semibold text-white mb-4 flex items-center">
                    <svg class="w-5 h-5 mr-2 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    System Health
                </h2>
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-green-500 rounded-full mr-3 animate-pulse"></div>
                        <span class="text-dark-muted">Database: <span id="db-status" class="text-green-400 font-medium">-</span></span>
                    </div>
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-green-500 rounded-full mr-3 animate-pulse"></div>
                        <span class="text-dark-muted">Redis: <span id="redis-status" class="text-green-400 font-medium">-</span></span>
                    </div>
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-green-500 rounded-full mr-3 animate-pulse"></div>
                        <span class="text-dark-muted">Agents: <span id="agents-status" class="text-green-400 font-medium">-</span></span>
                    </div>
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-green-500 rounded-full mr-3 animate-pulse"></div>
                        <span class="text-dark-muted">Overall: <span id="overall-status" class="text-green-400 font-medium">-</span></span>
                    </div>
                </div>
            </div>
            
            <!-- Drafts List -->
            <div class="bg-dark-surface rounded-xl shadow-xl border border-dark-card">
                <div class="px-6 py-4 border-b border-dark-card">
                    <h2 class="text-xl font-semibold text-white flex items-center">
                        <svg class="w-5 h-5 mr-2 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                        Recent Drafts
                    </h2>
                </div>
                <div class="divide-y divide-dark-card" id="drafts-list">
                    <!-- Drafts will be loaded here -->
                </div>
            </div>
        </div>
        
        <!-- Edit Modal -->
        <div id="edit-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
            <div class="flex items-center justify-center min-h-screen p-4">
                <div class="bg-dark-surface rounded-xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden border border-dark-card">
                    <div class="px-6 py-4 border-b border-dark-card flex items-center justify-between">
                        <h3 class="text-xl font-semibold text-white">Edit Draft</h3>
                        <button onclick="closeEditModal()" class="text-dark-muted hover:text-white">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                    <div class="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
                        <form id="edit-form" class="space-y-6">
                            <div>
                                <label class="block text-sm font-medium text-dark-muted mb-2">Title</label>
                                <input type="text" id="edit-title" class="w-full px-4 py-3 bg-dark-card border border-dark-card rounded-lg text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="Enter draft title">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-dark-muted mb-2">Summary</label>
                                <textarea id="edit-summary" rows="3" class="w-full px-4 py-3 bg-dark-card border border-dark-card rounded-lg text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="Enter draft summary"></textarea>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-dark-muted mb-2">Content</label>
                                <textarea id="edit-body" rows="12" class="w-full px-4 py-3 bg-dark-card border border-dark-card rounded-lg text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="Enter draft content"></textarea>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-dark-muted mb-2">Tags (comma-separated)</label>
                                <input type="text" id="edit-tags" class="w-full px-4 py-3 bg-dark-card border border-dark-card rounded-lg text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="Enter tags separated by commas">
                            </div>
                        </form>
                    </div>
                    <div class="px-6 py-4 border-t border-dark-card flex justify-end space-x-3">
                        <button onclick="closeEditModal()" class="px-6 py-2 bg-dark-card text-dark-muted rounded-lg hover:bg-dark-card/80 transition-colors">
                            Cancel
                        </button>
                        <button onclick="saveDraft()" class="px-6 py-2 btn-primary text-white rounded-lg">
                            Save Changes
                        </button>
                    </div>
                </div>
            </div>
        </div>
        
        <script>
            let currentDraftId = null;
            
            // Load dashboard data
            async function loadDashboard() {
                try {
                    // Load stats
                    const statsResponse = await fetch('/api/stats');
                    const stats = await statsResponse.json();
                    
                    document.getElementById('total-drafts').textContent = stats.total_drafts;
                    document.getElementById('published-drafts').textContent = stats.published_drafts;
                    document.getElementById('draft-drafts').textContent = stats.draft_drafts;
                    document.getElementById('active-channels').textContent = stats.active_channels;
                    
                    // Load health
                    const healthResponse = await fetch('/api/health');
                    const health = await healthResponse.json();
                    
                    document.getElementById('db-status').textContent = health.database;
                    document.getElementById('redis-status').textContent = health.redis;
                    document.getElementById('agents-status').textContent = health.agents;
                    document.getElementById('overall-status').textContent = health.status;
                    
                    // Load drafts
                    const draftsResponse = await fetch('/api/drafts');
                    const drafts = await draftsResponse.json();
                    
                    const draftsList = document.getElementById('drafts-list');
                    draftsList.innerHTML = drafts.map(draft => `
                        <div class="px-6 py-6">
                            <div class="flex items-start justify-between">
                                <div class="flex-1">
                                    <h3 class="text-xl font-semibold text-white mb-2">${draft.title}</h3>
                                    <p class="text-dark-muted mb-3 leading-relaxed">${draft.summary}</p>
                                    <div class="flex items-center space-x-4 mb-3">
                                        <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                                            draft.status === 'published' ? 'bg-green-500/20 text-green-400' : 'bg-yellow-500/20 text-yellow-400'
                                        }">
                                            ${draft.status}
                                        </span>
                                        <span class="text-sm text-dark-muted">${new Date(draft.created_at).toLocaleDateString()}</span>
                                        <div class="flex flex-wrap gap-1">
                                            ${draft.tags.map(tag => `
                                                <span class="px-2 py-1 bg-dark-card text-xs text-dark-muted rounded">${tag}</span>
                                            `).join('')}
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <div class="flex items-center space-x-2 mb-2">
                                            <span class="text-sm font-medium text-dark-muted">Publish to:</span>
                                            <div class="flex space-x-1">
                                                ${draft.publish_destinations.map(dest => `
                                                    <span class="inline-flex items-center px-2 py-1 rounded text-xs font-medium ${
                                                        dest === 'substack' ? 'bg-orange-500/20 text-orange-400' :
                                                        dest === 'linkedin' ? 'bg-blue-500/20 text-blue-400' :
                                                        dest === 'twitter' ? 'bg-sky-500/20 text-sky-400' :
                                                        'bg-gray-500/20 text-gray-400'
                                                    }">
                                                        ${dest === 'substack' ? '📧 Substack' :
                                                          dest === 'linkedin' ? '💼 LinkedIn' :
                                                          dest === 'twitter' ? '🐦 Twitter' :
                                                          dest}
                                                    </span>
                                                `).join('')}
                                            </div>
                                        </div>
                                        ${draft.published_to && draft.published_to.length > 0 ? `
                                            <div class="flex items-center space-x-2">
                                                <span class="text-sm font-medium text-green-400">✓ Published to:</span>
                                                <div class="flex space-x-1">
                                                    ${draft.published_to.map(dest => `
                                                        <span class="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-green-500/20 text-green-400">
                                                            ${dest === 'substack' ? '📧 Substack' :
                                                              dest === 'linkedin' ? '💼 LinkedIn' :
                                                              dest === 'twitter' ? '🐦 Twitter' :
                                                              dest}
                                                        </span>
                                                    `).join('')}
                                                </div>
                                            </div>
                                        ` : ''}
                                    </div>
                                    <div class="text-sm text-dark-muted">
                                        <p class="line-clamp-2">${draft.body.substring(0, 200)}${draft.body.length > 200 ? '...' : ''}</p>
                                    </div>
                                </div>
                                <div class="flex space-x-2 ml-4">
                                    <button onclick="editDraft(${draft.id})" class="px-4 py-2 btn-warning text-white rounded-lg text-sm font-medium">
                                        Edit
                                    </button>
                                    <button onclick="publishDraft(${draft.id})" class="px-4 py-2 btn-success text-white rounded-lg text-sm font-medium">
                                        Publish
                                    </button>
                                </div>
                            </div>
                        </div>
                    `).join('');
                    
                } catch (error) {
                    console.error('Error loading dashboard:', error);
                }
            }
            
            // Edit draft functionality
            async function editDraft(draftId) {
                try {
                    const response = await fetch(`/api/drafts/${draftId}`);
                    const draft = await response.json();
                    
                    currentDraftId = draftId;
                    document.getElementById('edit-title').value = draft.title;
                    document.getElementById('edit-summary').value = draft.summary;
                    document.getElementById('edit-body').value = draft.body;
                    document.getElementById('edit-tags').value = draft.tags.join(', ');
                    
                    document.getElementById('edit-modal').classList.remove('hidden');
                } catch (error) {
                    console.error('Error loading draft:', error);
                    alert('Error loading draft for editing');
                }
            }
            
            // Save draft changes
            async function saveDraft() {
                if (!currentDraftId) return;
                
                try {
                    const updateData = {
                        title: document.getElementById('edit-title').value,
                        summary: document.getElementById('edit-summary').value,
                        body: document.getElementById('edit-body').value,
                        tags: document.getElementById('edit-tags').value.split(',').map(tag => tag.trim()).filter(tag => tag)
                    };
                    
                    const response = await fetch(`/api/drafts/${currentDraftId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(updateData)
                    });
                    
                    if (response.ok) {
                        closeEditModal();
                        loadDashboard(); // Reload the dashboard
                        alert('Draft updated successfully!');
                    } else {
                        alert('Error updating draft');
                    }
                } catch (error) {
                    console.error('Error saving draft:', error);
                    alert('Error saving draft');
                }
            }
            
            // Publish draft
            async function publishDraft(draftId) {
                try {
                    // Get draft details first
                    const draftResponse = await fetch(`/api/drafts/${draftId}`);
                    const draft = await draftResponse.json();
                    
                    // Show confirmation with destinations
                    const destinations = draft.publish_destinations.map(dest => {
                        const names = {
                            'substack': '📧 Substack',
                            'linkedin': '💼 LinkedIn', 
                            'twitter': '🐦 Twitter'
                        };
                        return names[dest] || dest;
                    }).join(', ');
                    
                    if (confirm(`Publish "${draft.title}" to: ${destinations}?`)) {
                        const response = await fetch(`/api/drafts/${draftId}/publish`, {
                            method: 'POST'
                        });
                        
                        if (response.ok) {
                            const result = await response.json();
                            loadDashboard(); // Reload the dashboard
                            alert(`DEMO MODE: ${result.message}\n\n⚠️ This is a demonstration dashboard. No actual publishing occurs.`);
                        } else {
                            alert('Error publishing draft');
                        }
                    }
                } catch (error) {
                    console.error('Error publishing draft:', error);
                    alert('Error publishing draft');
                }
            }
            
            // Close edit modal
            function closeEditModal() {
                document.getElementById('edit-modal').classList.add('hidden');
                currentDraftId = null;
            }
            
            // Load dashboard on page load
            loadDashboard();
        </script>
    </body>
    </html>
    """)

@app.get("/api/health")
async def get_health():
    """Get system health status"""
    return SAMPLE_HEALTH

@app.get("/api/stats")
async def get_stats():
    """Get dashboard statistics"""
    return SAMPLE_STATS

@app.get("/api/drafts")
async def get_drafts():
    """Get all drafts"""
    return SAMPLE_DRAFTS

@app.get("/api/drafts/{draft_id}")
async def get_draft(draft_id: int):
    """Get a specific draft"""
    draft = next((d for d in SAMPLE_DRAFTS if d["id"] == draft_id), None)
    if not draft:
        raise HTTPException(status_code=404, detail="Draft not found")
    return draft

@app.put("/api/drafts/{draft_id}")
async def update_draft(draft_id: int, update_data: DraftUpdate):
    """Update a draft"""
    draft = next((d for d in SAMPLE_DRAFTS if d["id"] == draft_id), None)
    if not draft:
        raise HTTPException(status_code=404, detail="Draft not found")
    
    # Update the draft with provided data
    if update_data.title is not None:
        draft["title"] = update_data.title
    if update_data.summary is not None:
        draft["summary"] = update_data.summary
    if update_data.body is not None:
        draft["body"] = update_data.body
    if update_data.tags is not None:
        draft["tags"] = update_data.tags
    
    draft["updated_at"] = datetime.now().isoformat()
    
    return {"message": f"Draft {draft_id} updated successfully", "draft": draft}

@app.post("/api/drafts/{draft_id}/publish")
async def publish_draft(draft_id: int):
    """Publish a draft (DEMO MODE - Not actually publishing)"""
    draft = next((d for d in SAMPLE_DRAFTS if d["id"] == draft_id), None)
    if not draft:
        raise HTTPException(status_code=404, detail="Draft not found")
    
    # DEMO MODE: Simulate publishing to all destinations
    draft["status"] = "published"
    draft["updated_at"] = datetime.now().isoformat()
    
    # Add to published_to list (simulate publishing to all destinations)
    for dest in draft["publish_destinations"]:
        if dest not in draft["published_to"]:
            draft["published_to"].append(dest)
    
    return {
        "message": f"DEMO: Draft {draft_id} would be published to {', '.join(draft['publish_destinations'])} (not actually published)", 
        "draft": draft,
        "published_to": draft["published_to"],
        "demo_mode": True,
        "warning": "This is a demonstration dashboard. No actual publishing occurs."
    }

@app.get("/api/docs")
async def get_docs():
    """API documentation"""
    return {"message": "API documentation available at /docs"}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8001)
