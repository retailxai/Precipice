#!/usr/bin/env python3
"""
Simple RetailXAI Dashboard - Production Ready
A simplified version that works without complex database setup
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
import uvicorn
import json
import os
from datetime import datetime
from typing import List, Dict, Any

app = FastAPI(
    title="RetailXAI Dashboard",
    description="Simple production-ready dashboard for RetailXAI",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Sample data
SAMPLE_DRAFTS = [
    {
        "id": 1,
        "title": "Walmart Shows Strong Q4 Performance",
        "summary": "Walmart demonstrates robust growth in Q4 2024 with positive market trends.",
        "body": "Walmart has shown strong performance in Q4 2024 with positive sentiment and growing market share. The company is focusing on digital-first consumer preferences and expanding automation capabilities.",
        "status": "draft",
        "created_at": "2025-09-08T23:44:25Z",
        "tags": ["retail", "walmart", "q4", "performance"]
    },
    {
        "id": 2,
        "title": "AI Trends in Retail",
        "summary": "This is a test article generated by RetailXAI to demonstrate LinkedIn publishing capabilities.",
        "body": "The retail industry is experiencing significant transformation driven by AI and automation technologies. Companies are investing in these capabilities to improve customer experience and operational efficiency.",
        "status": "published",
        "created_at": "2025-09-11T22:11:42Z",
        "tags": ["ai", "retail", "automation", "technology"]
    }
]

SAMPLE_HEALTH = {
    "status": "healthy",
    "database": "connected",
    "redis": "connected",
    "agents": "running",
    "last_check": datetime.now().isoformat()
}

SAMPLE_STATS = {
    "total_drafts": 2,
    "published_drafts": 1,
    "draft_drafts": 1,
    "active_channels": 3,
    "total_views": 1250
}

@app.get("/")
async def root():
    """Serve the main dashboard page"""
    return HTMLResponse(content="""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>RetailXAI Dashboard</title>
        <script src="https://cdn.tailwindcss.com"></script>
    </head>
    <body class="bg-gray-100 min-h-screen">
        <div class="container mx-auto px-4 py-8">
            <header class="mb-8">
                <h1 class="text-3xl font-bold text-gray-900">RetailXAI Dashboard</h1>
                <p class="text-gray-600">Production-Grade Content Management System</p>
            </header>
            
            <!-- Stats Cards -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                <div class="bg-white rounded-lg shadow p-6">
                    <h3 class="text-lg font-semibold text-gray-900">Total Drafts</h3>
                    <p class="text-3xl font-bold text-blue-600" id="total-drafts">-</p>
                </div>
                <div class="bg-white rounded-lg shadow p-6">
                    <h3 class="text-lg font-semibold text-gray-900">Published</h3>
                    <p class="text-3xl font-bold text-green-600" id="published-drafts">-</p>
                </div>
                <div class="bg-white rounded-lg shadow p-6">
                    <h3 class="text-lg font-semibold text-gray-900">Draft</h3>
                    <p class="text-3xl font-bold text-yellow-600" id="draft-drafts">-</p>
                </div>
                <div class="bg-white rounded-lg shadow p-6">
                    <h3 class="text-lg font-semibold text-gray-900">Active Channels</h3>
                    <p class="text-3xl font-bold text-purple-600" id="active-channels">-</p>
                </div>
            </div>
            
            <!-- Health Status -->
            <div class="bg-white rounded-lg shadow p-6 mb-8">
                <h2 class="text-xl font-semibold text-gray-900 mb-4">System Health</h2>
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                        <span class="text-gray-700">Database: <span id="db-status">-</span></span>
                    </div>
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                        <span class="text-gray-700">Redis: <span id="redis-status">-</span></span>
                    </div>
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                        <span class="text-gray-700">Agents: <span id="agents-status">-</span></span>
                    </div>
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                        <span class="text-gray-700">Overall: <span id="overall-status">-</span></span>
                    </div>
                </div>
            </div>
            
            <!-- Drafts List -->
            <div class="bg-white rounded-lg shadow">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h2 class="text-xl font-semibold text-gray-900">Recent Drafts</h2>
                </div>
                <div class="divide-y divide-gray-200" id="drafts-list">
                    <!-- Drafts will be loaded here -->
                </div>
            </div>
        </div>
        
        <script>
            // Load dashboard data
            async function loadDashboard() {
                try {
                    // Load stats
                    const statsResponse = await fetch('/api/stats');
                    const stats = await statsResponse.json();
                    
                    document.getElementById('total-drafts').textContent = stats.total_drafts;
                    document.getElementById('published-drafts').textContent = stats.published_drafts;
                    document.getElementById('draft-drafts').textContent = stats.draft_drafts;
                    document.getElementById('active-channels').textContent = stats.active_channels;
                    
                    // Load health
                    const healthResponse = await fetch('/api/health');
                    const health = await healthResponse.json();
                    
                    document.getElementById('db-status').textContent = health.database;
                    document.getElementById('redis-status').textContent = health.redis;
                    document.getElementById('agents-status').textContent = health.agents;
                    document.getElementById('overall-status').textContent = health.status;
                    
                    // Load drafts
                    const draftsResponse = await fetch('/api/drafts');
                    const drafts = await draftsResponse.json();
                    
                    const draftsList = document.getElementById('drafts-list');
                    draftsList.innerHTML = drafts.map(draft => `
                        <div class="px-6 py-4">
                            <div class="flex items-center justify-between">
                                <div>
                                    <h3 class="text-lg font-medium text-gray-900">${draft.title}</h3>
                                    <p class="text-gray-600 mt-1">${draft.summary}</p>
                                    <div class="flex items-center mt-2">
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                            draft.status === 'published' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                                        }">
                                            ${draft.status}
                                        </span>
                                        <span class="text-sm text-gray-500 ml-2">${new Date(draft.created_at).toLocaleDateString()}</span>
                                    </div>
                                </div>
                                <div class="flex space-x-2">
                                    <button class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
                                        Edit
                                    </button>
                                    <button class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700">
                                        Publish
                                    </button>
                                </div>
                            </div>
                        </div>
                    `).join('');
                    
                } catch (error) {
                    console.error('Error loading dashboard:', error);
                }
            }
            
            // Load dashboard on page load
            loadDashboard();
        </script>
    </body>
    </html>
    """)

@app.get("/api/health")
async def get_health():
    """Get system health status"""
    return SAMPLE_HEALTH

@app.get("/api/stats")
async def get_stats():
    """Get dashboard statistics"""
    return SAMPLE_STATS

@app.get("/api/drafts")
async def get_drafts():
    """Get all drafts"""
    return SAMPLE_DRAFTS

@app.get("/api/drafts/{draft_id}")
async def get_draft(draft_id: int):
    """Get a specific draft"""
    draft = next((d for d in SAMPLE_DRAFTS if d["id"] == draft_id), None)
    if not draft:
        raise HTTPException(status_code=404, detail="Draft not found")
    return draft

@app.post("/api/drafts/{draft_id}/publish")
async def publish_draft(draft_id: int):
    """Publish a draft"""
    draft = next((d for d in SAMPLE_DRAFTS if d["id"] == draft_id), None)
    if not draft:
        raise HTTPException(status_code=404, detail="Draft not found")
    
    # Simulate publishing
    draft["status"] = "published"
    return {"message": f"Draft {draft_id} published successfully", "draft": draft}

@app.get("/api/docs")
async def get_docs():
    """API documentation"""
    return {"message": "API documentation available at /docs"}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8001)
